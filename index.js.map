{"version":3,"sources":["src/index.js"],"names":[],"mappings":";;;;;;;QAMgB,KAAK,GAAL,KAAK;;;;;IANd,EAAE,2BAAM,IAAI;;IACX,IAAI,WAAO,aAAa,EAAxB,IAAI;;AAKL,SAAS,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE;AAChC,MAAK,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAG;AACtC,WAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;GAC1B;AACD,MAAI,CAAC,IAAI,EAAE,UAAC,GAAG,EAAE,CAAC,EAAK;AACrB,QAAI;;AAEF,UAAK,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,QAAQ,CAAC,EAAG;AACzB,YAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;OAC/B,MAAM;AACL,YAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;OACf;KACF,CAAC,OAAM,CAAC,EAAE;;AAET,UAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;KACf;GACF,CAAC,CAAC;AACH,SAAO,IAAI,CAAC;CACb;;qBAEc,KAAK","file":"index.js","sourcesContent":["import is from 'is';\nimport {each} from 'magic-loops';\n\n/*\n* Recursively merge properties of two objects \n*/\nexport function merge(obj1, obj2) {\n  if ( is.array(obj1) && is.array(obj2) ) {\n    return obj1.concat(obj2);\n  }\n  each(obj2, (obj, p) => {\n    try {\n      // Property in destination object set; update its value.\n      if ( is.a(obj, 'object') ) {\n        obj1[p] = merge(obj1[p], obj);\n      } else {\n        obj1[p] = obj;\n      }\n    } catch(e) {\n      // Property in destination object not set; create it and set its value.\n      obj1[p] = obj;\n    }\n  });\n  return obj1;\n}\n\nexport default merge;\n"]}